-- Creator: Laurent Tihay
-- Last update : 04/10/2017
-- provides a little audit of the instance and the databases
-- works for SQL 2005, 2008, 2008R2 and 2012
-- !!! before running the audit : Check the size of the ERRORLOG and ERRORLOG.1 to .6, 
-- 	if they are huge the audit can take a long time
-- 	then don't run the parts where xp_readerrorlog is inserted
-- verify also that ERRORLOLG archives are not renamed
-- 	(part of the audit will fail if ERRORLOG.1 to .6 don't exist)

USE [master]
GO
SET NOCOUNT ON
PRINT '**************************************************************************'
PRINT 'AUDIT START : '+CONVERT(CHAR(19),GETDATE(),0)
PRINT '**************************************************************************'
--SELECT  'Last SQL Server Start time: '+CONVERT(CHAR(19),sqlserver_start_time ,0) FROM sys.dm_os_sys_info
--store configuration in order to restore it after running the script.

IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb].[dbo].[config]'))
DROP TABLE [tempdb].[dbo].[config]

CREATE TABLE  [tempdb].[dbo].[config]
(
[comment] nvarchar(255) NOT NULL
,[value] int NOT NULL
)
INSERT INTO [tempdb].[dbo].[config] 
	SELECT comment,value 
	FROM master.sys.syscurconfigs 
	WHERE comment IN ('show advanced options','Enable or disable command shell')

-- verify if show advanced options is on
IF (SELECT value 
	FROM master.sys.syscurconfigs
	WHERE comment='show advanced options') = 0
BEGIN
	EXEC master..sp_configure 'show advanced options',1
	RECONFIGURE
END

-- verify if show xp_cmdshell is on
IF (SELECT value 
	FROM master.sys.syscurconfigs
	WHERE comment='Enable or disable command shell') = 0
BEGIN
	EXEC master..sp_configure 'xp_cmdshell',1
	RECONFIGURE
END
--list of databases ONLINE
IF EXISTS (SELECT * FROM [tempdb].[dbo].sysobjects WHERE id =
object_id(N'[tempdb].[dbo].[OnlineDB]'))
DROP TABLE [tempdb].[dbo].[OnlineDB]
CREATE TABLE [tempdb].[dbo].[OnlineDB] ([name] sysname)
INSERT INTO [tempdb].[dbo].[OnlineDB] SELECT name FROM master.sys.databases WHERE state = 0


PRINT ''
PRINT '**************************************************************************'
PRINT '				Serveur & Version		                 '
PRINT '**************************************************************************'
PRINT ''
PRINT 'Server name   : '+@@SERVERNAME
PRINT 'Instance name : '+@@SERVICENAME
GO
PRINT ''
PRINT 'SQL Server Version & licenses.................:'
PRINT ''
SET NOCOUNT ON
DECLARE @PRODVER SQL_VARIANT
DECLARE @PRODLVL SQL_VARIANT
DECLARE @PRODED SQL_VARIANT
DECLARE @LICTYPE SQL_VARIANT
DECLARE @LICNUM	SQL_VARIANT
DECLARE @LASTUPDATE	SQL_VARIANT
DECLARE @RESVER	SQL_VARIANT
DECLARE @SQLVER smallint

SET @PRODVER=(SELECT  SERVERPROPERTY('productversion'))
PRINT 'Product Version			  : '+CONVERT(VARCHAR(20),@PRODVER)
SET @SQLVER = 0
IF (SELECT CONVERT(VARCHAR(20),@PRODVER)) LIKE '9.%' SET @SQLVER = 9
IF (SELECT CONVERT(VARCHAR(20),@PRODVER)) LIKE '10.%' SET @SQLVER = 10
IF (SELECT CONVERT(VARCHAR(20),@PRODVER)) LIKE '12.%' SET @SQLVER = 12 



--Store version into a temp table
IF EXISTS (SELECT * FROM [tempdb].[dbo].sysobjects
WHERE id = object_id(N'[tempdb]..[sqlver]'))
DROP TABLE [tempdb].[dbo].[sqlver]
CREATE TABLE [tempdb].[dbo].[sqlver]
(
[sqlver_value] smallint NOT NULL
)
INSERT INTO [tempdb].[dbo].[sqlver] values (@SQLVER)
SELECT [sqlver_value] FROM [tempdb].[dbo].[sqlver]


SET @PRODLVL=(SELECT SERVERPROPERTY ('productlevel'))
PRINT 'Product Level			  : '+CONVERT(VARCHAR(10),@PRODLVL)
SET @PRODED=(SELECT SERVERPROPERTY ('edition'))
PRINT 'Product Edition			  : '+CONVERT(VARCHAR(30),@PRODED)
SET @RESVER=(SELECT SERVERPROPERTY ('ResourceVersion'))
PRINT 'Product ResourceVersion	  : '+CONVERT(VARCHAR(20),@RESVER)
SET @LASTUPDATE=(SELECT SERVERPROPERTY ('ResourceLastUpdateDateTime'))
PRINT 'ResourceLastUpdateDateTime : '+ISNULL(CONVERT(VARCHAR(30),@LASTUPDATE),'NULL')
SET @LICTYPE=(SELECT SERVERPROPERTY ('LicenseType'))
PRINT 'LicenseType				  : '+CONVERT(NVARCHAR(128),@LICTYPE)
SET @LICNUM=(SELECT SERVERPROPERTY ('NumLicenses'))
PRINT 'NumLicenses				  : '+ISNULL(CONVERT(VARCHAR(10),@LICNUM),'NULL')
SET NOCOUNT OFF
PRINT ''
PRINT 'System global parameters......................:'
PRINT ''
SET NOCOUNT ON
EXEC master..xp_msver
SET NOCOUNT OFF


--DECLARE @PRODVER SQL_VARIANT
--SET @PRODVER=(SELECT  SERVERPROPERTY('productversion'))
--IF (SELECT CONVERT(VARCHAR(20),@PRODVER)) LIKE '9.%' GOTO SQL2005ver
--IF (SELECT CONVERT(VARCHAR(20),@PRODVER)) LIKE '10.%' GOTO SQL2008ver
--IF (SELECT CONVERT(VARCHAR(20),@PRODVER)) LIKE '12.%' GOTO SQL2012ver 


PRINT ''
PRINT '**************************************************************************'
PRINT '				Standalone/Cluster				                 '
PRINT '**************************************************************************'
PRINT ''
-- Is my Instance within a failover Cluster topology?
SET NOCOUNT ON
DECLARE @COUNT INT
SET @COUNT = (SELECT COUNT(*) FROM sys.dm_os_cluster_nodes)
IF @COUNT = 0
PRINT 'STANDALONE'
IF @COUNT > 0
BEGIN
	PRINT 'CLUSTER'
	PRINT 'Node list :'
	PRINT ''
	SELECT * FROM sys.dm_os_cluster_nodes
	PRINT 'Shared Drives list :'
	PRINT ''
	SELECT * FROM sys.dm_io_cluster_shared_drives
	PRINT ''
END

-- Is my Instance within an AlwaysOn topology?
-- List AG Replica Details 
IF (select [sqlver_value] from [tempdb].[dbo].[sqlver]) >=12
BEGIN
	PRINT ''
	PRINT '**************************************************************************'
	PRINT '				AlwaysOn				                 '
	PRINT '**************************************************************************'
	PRINT ''
	SET NOCOUNT ON
	IF EXISTS (SELECT * FROM tempdb..sysobjects
	WHERE id = object_id(N'[tempdb]..[alwayson]'))
	DROP TABLE [tempdb].[dbo].[alwayson]
	CREATE TABLE [tempdb].[dbo].[alwayson]
	(
	[group_name] nvarchar(256) NOT NULL
	, [replica_server_name] nvarchar(256) NOT NULL
	, [node_name] nvarchar(256) NOT NULL
	, [role_desc] nvarchar(60) NOT NULL
	)
	INSERT INTO [tempdb].[dbo].[alwayson]
		select n.group_name,n.replica_server_name,n.node_name,rs.role_desc 
		from sys.dm_hadr_availability_replica_cluster_nodes n 
		join sys.dm_hadr_availability_replica_cluster_states cs 
		on n.replica_server_name = cs.replica_server_name 
		join sys.dm_hadr_availability_replica_states rs  
		on rs.replica_id = cs.replica_id
 
	-- AG Status
	IF EXISTS (SELECT * FROM tempdb..sysobjects
	WHERE id = object_id(N'[tempdb]..[alwayson_status]'))
	DROP TABLE [tempdb].[dbo].[alwayson_status]
	CREATE TABLE [tempdb].[dbo].[alwayson_status]
	(
	[group_name] nvarchar(256) NOT NULL
	, [replica_server_name] nvarchar(256) NOT NULL
	, [node_name] nvarchar(256) NOT NULL
	, [role_desc] nvarchar(60) NOT NULL
	, [DBName] nvarchar(80) NOT NULL
	, [synchronization_state_desc] nvarchar(60) NOT NULL 
	, [synchronization_health_desc] nvarchar(60) NOT NULL 
	)

	DECLARE @HADRName    varchar(25) 
	SET @HADRName = @@SERVERNAME 
	INSERT INTO [tempdb].[dbo].[alwayson_status]
	select n.group_name,n.replica_server_name,n.node_name,rs.role_desc, 
	db_name(drs.database_id) as 'DBName',drs.synchronization_state_desc,drs.synchronization_health_desc 
	from sys.dm_hadr_availability_replica_cluster_nodes n 
	join sys.dm_hadr_availability_replica_cluster_states cs 
	on n.replica_server_name = cs.replica_server_name 
	join sys.dm_hadr_availability_replica_states rs  
	on rs.replica_id = cs.replica_id 
	join sys.dm_hadr_database_replica_states drs 
	on rs.replica_id=drs.replica_id 
	where n.replica_server_name <> @HADRName

	select * from [tempdb].[dbo].[alwayson]
	select * from [tempdb].[dbo].[alwayson_status]
	-- Update OnlineDB
	--select DBName from [tempdb].[dbo].[alwayson_status] where role_desc = 'SECONDARY'
	-- faire un curseur qui regarde pour chaque ligne de OnlineDb si la base n'est pas SECONDARY sur le serveur sur lequel on se trouve (si @@servername = select replica_server_name where role_desc = secondary)
END



SET NOCOUNT OFF

PRINT ''
PRINT '**************************************************************************'
PRINT '				Free local disk space		                 '
PRINT '**************************************************************************'
PRINT ''
SET NOCOUNT ON
exec xp_fixeddrives
SET NOCOUNT OFF
go
PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				Server Role Members						 '
PRINT '**************************************************************************'
PRINT ''
PRINT ''
SET NOCOUNT ON
SELECT	[loginname] AS [NAME]
		,[dbname] AS [DBNAME]
		,[language] AS [LANGUAGE]
		,CASE sysadmin
			WHEN 0 THEN 'NO'
			WHEN 1 THEN 'YES'
			END AS [SYSADMIN]
		,CASE securityadmin
			WHEN 0 THEN 'NO'
			WHEN 1 THEN 'YES'
			END AS [SECURITYADMIN]
		,CASE [serveradmin]
			WHEN 0 THEN 'NO'
			WHEN 1 THEN 'YES'
			END AS [SERVERADMIN]
		,CASE setupadmin
			WHEN 0 THEN 'NO'
			WHEN 1 THEN 'YES'
			END AS [SETUPADMIN]
		,CASE processadmin
			WHEN 0 THEN 'NO'
			WHEN 1 THEN 'YES'
			END AS [PROCESSADMIN]
		,CASE diskadmin
			WHEN 0 THEN 'NO'
			WHEN 1 THEN 'YES'
			END AS [DISKADMIN]
		,CASE dbcreator
			WHEN 0 THEN 'NO'
			WHEN 1 THEN 'YES'
			END AS [DBCREATOR]
		,CASE bulkadmin
			WHEN 0 THEN 'NO'
			WHEN 1 THEN 'YES'
			END AS [BULKADMIN]						
FROM	master.sys.syslogins
SET NOCOUNT OFF

PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				sp_help_revlogin													 '
PRINT '**************************************************************************'
PRINT ''
PRINT ''
USE [master]
GO 

IF OBJECT_ID ('sp_hexadecimal') IS NOT NULL
DROP PROCEDURE sp_hexadecimal
GO
CREATE PROCEDURE sp_hexadecimal
@binvalue varbinary(256),
@hexvalue varchar (514) OUTPUT
AS
DECLARE @charvalue varchar (514)
DECLARE @i int
DECLARE @length int
DECLARE @hexstring char(16)
SELECT @charvalue = '0x'
SELECT @i = 1
SELECT @length = DATALENGTH (@binvalue)
SELECT @hexstring = '0123456789ABCDEF'
WHILE (@i <= @length)
BEGIN
DECLARE @tempint int
DECLARE @firstint int
DECLARE @secondint int
SELECT @tempint = CONVERT(int, SUBSTRING(@binvalue,@i,1))
SELECT @firstint = FLOOR(@tempint/16)
SELECT @secondint = @tempint - (@firstint*16)
SELECT @charvalue = @charvalue +
SUBSTRING(@hexstring, @firstint+1, 1) +
SUBSTRING(@hexstring, @secondint+1, 1)
SELECT @i = @i + 1
END
SELECT @hexvalue = @charvalue
GO

IF OBJECT_ID ('sp_help_revlogin') IS NOT NULL
DROP PROCEDURE sp_help_revlogin
GO
CREATE PROCEDURE sp_help_revlogin @login_name sysname = NULL AS
DECLARE @name sysname
DECLARE @type varchar (1)
DECLARE @hasaccess int
DECLARE @denylogin int
DECLARE @is_disabled int
DECLARE @PWD_varbinary varbinary (256)
DECLARE @PWD_string varchar (514)
DECLARE @SID_varbinary varbinary (85)
DECLARE @SID_string varchar (514)
DECLARE @tmpstr varchar (1024)
DECLARE @is_policy_checked varchar (3)
DECLARE @is_expiration_checked varchar (3)

IF (@login_name IS NULL)
DECLARE login_curs CURSOR FOR
SELECT p.sid, p.name, p.type, p.is_disabled, l.hasaccess, l.denylogin
FROM sys.server_principals p LEFT JOIN sys.syslogins l ON ( l.name = p.name )
WHERE p.type IN ( 'S', 'G', 'U' ) AND p.name <> 'sa'
ELSE
DECLARE login_curs CURSOR FOR
SELECT p.sid, p.name, p.type, p.is_disabled, l.hasaccess, l.denylogin
FROM sys.server_principals p LEFT JOIN sys.syslogins l ON ( l.name = p.name )
WHERE p.type IN ( 'S', 'G', 'U' ) AND p.name = @login_name
OPEN login_curs
FETCH NEXT FROM login_curs INTO @SID_varbinary, @name, @type, @is_disabled, @hasaccess, @denylogin
IF (@@fetch_status = -1)
BEGIN
PRINT 'No login(s) found.'
CLOSE login_curs
DEALLOCATE login_curs
RETURN -1
END
SET @tmpstr = '/* sp_help_revlogin script '
PRINT @tmpstr
SET @tmpstr = '** Generated ' + CONVERT (varchar, GETDATE()) + ' on ' + @@SERVERNAME + ' */'
PRINT @tmpstr
PRINT ''
WHILE (@@fetch_status <> -1)
BEGIN
IF (@@fetch_status <> -2)
BEGIN
PRINT ''
SET @tmpstr = '-- Login: ' + @name
PRINT @tmpstr

IF (@type IN ( 'G', 'U'))
BEGIN -- NT authenticated account/group
SET @tmpstr = 'CREATE LOGIN ' + QUOTENAME( @name ) + ' FROM WINDOWS'
END
ELSE BEGIN -- SQL Server authentication
-- obtain password and sid
SET @PWD_varbinary = CAST( LOGINPROPERTY( @name, 'PasswordHash' ) AS varbinary (256) )
EXEC sp_hexadecimal @PWD_varbinary, @PWD_string OUT
EXEC sp_hexadecimal @SID_varbinary, @SID_string OUT
-- obtain password policy state
SELECT @is_policy_checked = 
CASE is_policy_checked WHEN 1 THEN 'ON' WHEN 0 THEN 'OFF' ELSE NULL END
FROM sys.sql_logins WHERE name = @name
SELECT @is_expiration_checked =
CASE is_expiration_checked WHEN 1 THEN 'ON' WHEN 0 THEN 'OFF' ELSE NULL END
FROM sys.sql_logins WHERE name = @name
SET @tmpstr = 'CREATE LOGIN ' + QUOTENAME( @name )
+ ' WITH PASSWORD = ' + @PWD_string
+ ' HASHED, SID = ' + @SID_string
IF ( @is_policy_checked IS NOT NULL )
BEGIN
SET @tmpstr = @tmpstr + ', CHECK_POLICY = ' + @is_policy_checked
END
IF ( @is_expiration_checked IS NOT NULL )
BEGIN
SET @tmpstr = @tmpstr + ', CHECK_EXPIRATION = ' + @is_expiration_checked
END
END
IF (@denylogin = 1)
BEGIN -- login is denied access
SET @tmpstr = @tmpstr + '; DENY CONNECT SQL TO ' + QUOTENAME( @name )
END
ELSE IF (@hasaccess = 0)
BEGIN -- login has exists but does not have access
SET @tmpstr = @tmpstr + '; REVOKE CONNECT SQL TO ' + QUOTENAME( @name )
END
IF (@is_disabled = 1)
BEGIN -- login is disabled
SET @tmpstr = @tmpstr + '; ALTER LOGIN ' + QUOTENAME( @name ) + ' DISABLE'
END
PRINT @tmpstr
END
FETCH NEXT FROM login_curs INTO @SID_varbinary, @name, @type, @is_disabled, @hasaccess, @denylogin
END
CLOSE login_curs
DEALLOCATE login_curs
RETURN 0
GO
EXEC sp_help_revlogin
GO

PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				SQL Logins with Password NULL or same as login	 '
PRINT '**************************************************************************'
PRINT ''
PRINT ''
SET NOCOUNT ON
---SQL Logins with blank passwords

select  serverproperty('machinename')                                        as 'Server Name',
                isnull(serverproperty('instancename'),serverproperty('machinename')) as 'Instance Name',  
                name                                                                 as 'Login With Blank Password'
        from    master.sys.sql_logins
        where   pwdcompare('',password_hash)=1
        order by name
        option (maxdop 1)
go
---SQL Logins with passwords same as logins
        select  serverproperty('machinename')                                        as 'Server Name',
                isnull(serverproperty('instancename'),serverproperty('machinename')) as 'Instance Name',  
                name                                                                 as 'Login With Password Same As Name'
        from    master.sys.sql_logins
        where   pwdcompare(name,password_hash) = 1
        order by name
        option (maxdop 1)
SET NOCOUNT OFF



PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				Orphaned Users		 '
PRINT '**************************************************************************'
PRINT ''
PRINT ''
SET NOCOUNT ON
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb].[dbo].[orphaned]'))
DROP TABLE [tempdb].[dbo].[orphaned]

CREATE TABLE  [tempdb].[dbo].[orphaned]
(
[UserName] nvarchar(255) NOT NULL
,[UserSID] int NOT NULL
)
declare @DBNAME1 sysname
declare @ORPHANED nvarchar(255)
DECLARE c1 cursor FOR
	--SELECT name
	--FROM master..sysdatabases
	SELECT name
	FROM [tempdb].[dbo].[OnlineDB]
	where name not in ('master','msdb','tempdb','model')
OPEN c1

FETCH c1 INTO @DBNAME1

IF @@FETCH_STATUS <> 0
      PRINT 'pas de bases'    


WHILE (@@FETCH_STATUS =0)
BEGIN
	truncate table [tempdb].[dbo].[orphaned]
    SET @ORPHANED =  'USE ['+@DBNAME1+']'
    SET @ORPHANED =  @ORPHANED+' EXEC sp_change_users_login @Action=''Report'''
	insert into [tempdb].[dbo].[orphaned] EXEC(@ORPHANED)
	if (select count(*) from [tempdb].[dbo].[orphaned])>0
	begin
		select @DBNAME1 as DbName,UserName,UserSID from [tempdb].[dbo].[orphaned]
	end
	
    FETCH c1 INTO @DBNAME1
END

CLOSE c1
DEALLOCATE  c1
GO
if (select count(*) from [tempdb].[dbo].[orphaned])=0
begin
	PRINT 'OK'
end
SET NOCOUNT OFF
PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				Last lines of each Error log from current to ERRORLOG.6		 '
PRINT '**************************************************************************'
PRINT ''
PRINT ''
-- insert errorlogs in table #Errors
SET NOCOUNT ON
DECLARE @COUNT	INT
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[#Errors]'))
DROP TABLE #Errors
CREATE TABLE #Errors (LogDate DATETIME,ProcessInfo varchar(20),vchMessage varchar(4000))
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[#Errors1]'))
DROP TABLE #Errors1
CREATE TABLE #Errors1 (LogDate DATETIME,ProcessInfo varchar(20),vchMessage varchar(4000))
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[#Errors2]'))
DROP TABLE #Errors2
CREATE TABLE #Errors2 (LogDate DATETIME,ProcessInfo varchar(20),vchMessage varchar(4000))
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[#Errors3]'))
DROP TABLE #Errors3
CREATE TABLE #Errors3 (LogDate DATETIME,ProcessInfo varchar(20),vchMessage varchar(4000))
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[#Errors4]'))
DROP TABLE #Errors4
CREATE TABLE #Errors4 (LogDate DATETIME,ProcessInfo varchar(20),vchMessage varchar(4000))
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[#Errors5]'))
DROP TABLE #Errors5
CREATE TABLE #Errors5 (LogDate DATETIME,ProcessInfo varchar(20),vchMessage varchar(4000))
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[#Errors6]'))
DROP TABLE #Errors6
CREATE TABLE #Errors6 (LogDate DATETIME,ProcessInfo varchar(20),vchMessage varchar(4000))

	PRINT 'ERRORLOG'
	INSERT #Errors EXEC master..xp_readerrorlog
	SELECT TOP 1 LogDate,vchMessage FROM #Errors ORDER BY LogDate DESC

	PRINT 'ERRORLOG.1'	
	INSERT #Errors1 EXEC master..xp_readerrorlog 1
	SELECT TOP 1 LogDate,vchMessage FROM #Errors1 ORDER BY LogDate DESC	

	PRINT 'ERRORLOG.2'
	INSERT #Errors2 EXEC master..xp_readerrorlog 2
	SELECT TOP 1 LogDate,vchMessage FROM #Errors2 ORDER BY LogDate DESC	

	PRINT 'ERRORLOG.3'
	INSERT #Errors3 EXEC master..xp_readerrorlog 3
	SELECT TOP 1 LogDate,vchMessage FROM #Errors3 ORDER BY LogDate DESC	

	PRINT 'ERRORLOG.4'
	INSERT #Errors4 EXEC master..xp_readerrorlog 4
	SELECT TOP 1 LogDate,vchMessage FROM #Errors4 ORDER BY LogDate DESC	

	PRINT 'ERRORLOG.5'
	INSERT #Errors5 EXEC master..xp_readerrorlog 5
	SELECT TOP 1 LogDate,vchMessage FROM #Errors5 ORDER BY LogDate DESC	

	PRINT 'ERRORLOG.6'
	INSERT #Errors6 EXEC master..xp_readerrorlog 6
	SELECT TOP 1 LogDate,vchMessage FROM #Errors6 ORDER BY LogDate DESC	

	INSERT INTO #Errors SELECT * FROM #Errors1
	DROP TABLE #Errors1
	INSERT INTO #Errors SELECT * FROM #Errors2
	DROP TABLE #Errors2
	INSERT INTO #Errors SELECT * FROM #Errors3
	DROP TABLE #Errors3
	INSERT INTO #Errors SELECT * FROM #Errors4
	DROP TABLE #Errors4
	INSERT INTO #Errors SELECT * FROM #Errors5
	DROP TABLE #Errors5
	INSERT INTO #Errors SELECT * FROM #Errors6
	DROP TABLE #Errors6
PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				Errors (severity 16&+)										 '
PRINT '**************************************************************************'
PRINT ''
PRINT ''
	SET @COUNT=	(
			SELECT count(*) FROM #Errors 
			WHERE vchMessage LIKE '%Error:%' 
			AND vchMessage NOT LIKE '%Severity: 0%'
			AND vchMessage NOT LIKE '%Severity: 11%'
			AND vchMessage NOT LIKE '%Severity: 12%'
			AND vchMessage NOT LIKE '%Severity: 13%'
			AND vchMessage NOT LIKE '%Severity: 14%'
			AND vchMessage NOT LIKE '%Severity: 15%'
			--AND vchMessage NOT LIKE '%Severity: 16%'
			)
	BEGIN
		IF @COUNT = 0 PRINT 'No critical errors found in errorlogs current to 6'
	ELSE
	SELECT LogDate,vchMessage FROM #Errors 
	WHERE vchMessage LIKE '%Error:%' 
	AND vchMessage NOT LIKE '%Severity: 0%' 
	AND vchMessage NOT LIKE '%Severity: 11%'
	AND vchMessage NOT LIKE '%Severity: 12%'
	AND vchMessage NOT LIKE '%Severity: 13%'
	AND vchMessage NOT LIKE '%Severity: 14%'
	AND vchMessage NOT LIKE '%Severity: 15%'
	--AND vchMessage NOT LIKE '%Severity: 16%'
	ORDER BY LogDate
	END



PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				Check Integrity											 '
PRINT '**************************************************************************'
PRINT ''
PRINT ''
SET NOCOUNT ON
declare @dbname sysname
DECLARE @cmd NVARCHAR(255)
DECLARE cursordb cursor FOR
	SELECT name
	FROM master.sys.databases WHERE name <> 'tempdb'
OPEN cursordb
FETCH cursordb INTO @dbname
WHILE (@@FETCH_STATUS =0)
BEGIN
	SET @cmd = 'SELECT top 1 LogDate,vchMessage FROM #Errors WHERE vchMessage LIKE ''%DBCC CHECKDB ('+@dbname+'%'' ORDER BY LogDate DESC'
--	PRINT @cmd
PRINT ''
PRINT 'Recent checkdb of '+QUOTENAME(@dbname)+' :'
PRINT ''
	EXEC sp_executesql @cmd
	PRINT ''
	FETCH cursordb INTO @dbname
END
CLOSE cursordb
DEALLOCATE  cursordb
SET NOCOUNT OFF

--SET NOCOUNT ON
----DECLARE @COUNT	INT
--	SET @COUNT=	(
--			SELECT COUNT(*) FROM #Errors 
--			WHERE vchMessage LIKE '%DBCC CHECK%' 
--			)
--	BEGIN
--		IF @COUNT = 0 PRINT 'NO CHECKDB found in ERRORLOGS 1 to 6'
--		ELSE
--	SELECT LogDate,vchMessage FROM #Errors 
--	WHERE vchMessage LIKE '%DBCC CHECK%' 
--	ORDER BY LogDate DESC 
--	END

-- drop #Errors
	DROP TABLE #Errors
GO
SET NOCOUNT OFF
PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				Last Backups 					 '
PRINT '**************************************************************************'
PRINT ''

SET NOCOUNT ON
-- drop temp proc if exists
IF object_id('tempdb..#prFileExists') IS NOT NULL
    DROP PROCEDURE #prFileExists
GO

-- START create temp proc to check backup file existence
	CREATE PROCEDURE dbo.#prFileExists 
		@path varchar(300) , 
		@p2 int  OUTPUT
	AS BEGIN
	/*
		DECLARE @EXISTS bit
		EXECUTE dbo.#prFileExists 'c:\boot.ini', @EXISTS OUTPUT
		SELECT @EXISTS AS [EXISTS]
	*/
		DECLARE @RES varchar(500)
		DECLARE @EXEC varchar(1000)
		IF object_id('tempdb..#cmdshell') IS NOT NULL
			DROP TABLE #cmdshell
		CREATE TABLE #cmdshell (
			res varchar (100)
		) 
		SET @EXEC = 'IF exist "' + @path + '" (echo Found) ELSE (echo NOT Found)' 
		INSERT INTO #cmdshell (res) 
			EXEC master..xp_cmdshell @EXEC
		DELETE #cmdshell WHERE res IS NULL
		SET @RES = (SELECT res FROM #cmdshell)
		IF @RES = 'Found'
			SET @p2 = 1
		ELSE
			SET @p2 = 0
	END
	GO
-- END create temp proc to check backup file existence
--Declare variables and temp table for existing backup data
DECLARE @i int
DECLARE @EXISTS bit
DECLARE @Location varchar(260)
SET @i = 0
DECLARE @tmp TABLE (
	[ID]				[int] identity(1,1) NOT NULL,
	[FileExists]		bit DEFAULT 0,
	[DBName] 			[varchar] (100) NULL ,
	[UserName] 			[varchar] (100) NULL ,
	[BackupSize] 		[varchar] (13) NULL ,
	[Duration] 			[varchar] (10) NULL ,
	[BackupAge]			[int] NULL ,
	[FinishDate] 		[varchar] (20) NULL ,
	[Location]			[varchar] (260) NULL ,
	[device_type] 		[tinyint] NULL 
) 

-- return data about databases with no backup history
PRINT ' ================================================================================================================================'
PRINT ' ' + @@servername + ' - Database Backup History (SQL Backups only)' 
PRINT ' '
if exists(
	SELECT 
		DB.name 
	FROM
		master..sysdatabases DB
		left join
		(
			select database_name
			from msdb..backupset BS
				join msdb..backupmediaset MS
					on
					BS.media_set_id = MS.media_set_id
					join msdb..backupmediafamily MF
					on
					BS.media_set_id = MF.media_set_id
				WHERE
				type = 'D'
				--and MF.device_type <> 7
			group by database_name
		) BS
		on BS.database_name = DB.name
	where 
		BS.database_name is null
		and 
		not DB.name = 'tempdb'
)
	
		SELECT 
			DB.name as [Databases With No Backup History]
		FROM
			master..sysdatabases DB
			left join
			(
				select database_name
				from msdb..backupset BS
				join msdb..backupmediaset MS
					on
					BS.media_set_id = MS.media_set_id
					join msdb..backupmediafamily MF
					on
					BS.media_set_id = MF.media_set_id
				WHERE
				type = 'D'
				--and MF.device_type <> 7
				group by database_name
			) BS
			on BS.database_name = DB.name
		where 
			BS.database_name is null
			and 
			not DB.name = 'tempdb'
else
		SELECT 
			'- None -' as [Databases With No Backup History]

-- get existing backup history data
-- (into table variable for later modification)
PRINT ' Databases With Backup History'
PRINT ' -------------------------------- '
INSERT @tmp(
	[DBName] 			
	, [UserName] 			
	, [BackupSize] 		
	, [Duration] 			
	, [BackupAge]	
	, [FinishDate] 		
	, [Location]
	, [device_type] 		
)
SELECT 
	cast(database_name AS varchar(100)) AS [DBName],
	cast(user_name AS varchar(100)) AS [UserName],
	str(cast(backup_size AS decimal(20,2)) / 1048576 ,10,2) + ' MB' AS [BackupSize],
	cast(datediff(n,backup_start_date,backup_finish_date) AS varchar(5)) + ' min.' AS [Duration],
	cast(datediff(dd,backup_finish_date,Getdate()) AS varchar(10))  AS [BackupAge],
	convert(varchar(20),backup_finish_date) AS [FinishDate],
	physical_device_name AS [Location],
	MF.device_type
FROM
	master..sysdatabases DB
	JOIN
	msdb..backupset BS
	ON DB.name = BS.database_name
	JOIN msdb..backupmediaset MS
	ON
	BS.media_set_id = MS.media_set_id
	JOIN msdb..backupmediafamily MF
	ON
	BS.media_set_id = MF.media_set_id
	JOIN
	(
		SELECT 
			max(backup_set_id) AS backup_set_id
		FROM
			msdb..backupset BS
			JOIN msdb..backupmediaset MS
				ON
				BS.media_set_id = MS.media_set_id
				JOIN msdb..backupmediafamily MF
				ON
				BS.media_set_id = MF.media_set_id
		WHERE
			type = 'D'
			--AND MF.device_type <> 7
		GROUP BY database_name
	) MaxBackup
	ON 
	BS.backup_set_id = MaxBackup.backup_set_id
WHERE
	type = 'D' 
	
-- loop through the results and update the FileExists field 
-- (calling temp proc for each row)
	SELECT @i = min(ID) FROM @tmp WHERE ID > @i
	WHILE @i IS NOT NULL BEGIN
		IF @i IS NOT NULL BEGIN
			--	PRINT cast(@i AS varchar(20))
			SET @Location = (SELECT Location FROM @tmp WHERE ID = @i)
			EXECUTE #prFileExists @Location, @EXISTS OUTPUT		
			UPDATE @tmp SET FileExists = @EXISTS WHERE ID = @i
		END
		SELECT @i = min(ID) FROM @tmp WHERE ID > @i
	END

-- return the results
PRINT ' Deleted backups'
PRINT ' -------------------------------- '
	SELECT 
		[DBName] 			
		, [UserName] 			
		, [BackupSize] 		
		, [Duration] 			
		, [BackupAge]	AS [BackupAge (Days)]
		, [FinishDate] 
		, [FileExists]
		, [Location]
		, [device_type]	
	FROM 
		@tmp
	WHERE	[FileExists] = 0
	ORDER BY 
		[BackupAge] DESC

PRINT ' Existing backups'
PRINT ' -------------------------------- '
	SELECT 
		[DBName] 			
		, [UserName] 			
		, [BackupSize] 		
		, [Duration] 			
		, [BackupAge]	AS [BackupAge (Days)]
		, [FinishDate] 
		, [FileExists]
		, [Location]
		, [device_type]	
	FROM 
		@tmp
	WHERE	[FileExists] = 1
	ORDER BY 
		[BackupAge] DESC

-- drop the temp proc
	IF object_id('tempdb..#prFileExists') IS NOT NULL
	    DROP PROCEDURE #prFileExists
	GO

PRINT ' ================================================================================================================================'
SET NOCOUNT OFF



PRINT ''
PRINT ''
--PRINT '**************************************************************************'
--PRINT '				Statistics														 '
--PRINT '**************************************************************************'
--PRINT ''
--faire un curseur sur toutes les bases, et faire un diff avec getdate (ex 24h)
--USE AdventureWorks;
--GO
--SELECT 'Index Name' = i.name, 'Statistics Date' = STATS_DATE(i.object_id, i.index_id)
--FROM sys.objects o
--JOIN sys.indexes i ON o.name = 'Address' AND o.object_id = i.object_id;
--GO

--PRINT '**************************************************************************'
--PRINT '				Top 20 queries by cumulative CPU usage within last 24 hours	 '
--PRINT '**************************************************************************'
--PRINT ''
--SET NOCOUNT ON
---- This query will list the top 20 queries by cumulative CPU usage within the last hour. 
--SELECT last_execution_time, total_worker_time AS [Total CPU Time]
--		, execution_count, total_worker_time/execution_count AS [Avg CPU Time]
--		, text, qp.query_plan 
--FROM sys.dm_exec_query_stats AS qs 
--	CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) AS st 
--	CROSS APPLY sys.dm_exec_query_plan(qs.plan_handle) as qp 
--WHERE DATEDIFF(hour, last_execution_time, getdate()) < 24 -- change hour time frame 
--ORDER BY total_worker_time DESC;
--SET NOCOUNT OFF

--PRINT ''
--PRINT ''

PRINT ''
PRINT ''
--PRINT '**************************************************************************'
--PRINT '				Missing Indexes												 '
--PRINT '**************************************************************************'
--PRINT ''

---- user_seeks:			This column represents the number of times the query has been executed since SQL Server start.
---- last_user_seek :		This column contains data and time data from when the user query was last executed.
---- avg_total_user_cost: This column represents the average total user cost each time when the user query was executed.
---- avg_user_impact:		This column represents the value in percentages. 
----						It informs us the amount of improvement which you can get if the index is created.
--SET NOCOUNT ON
--SELECT 
--[statement] AS [database.scheme.table],
--column_id , column_name, column_usage, 
--migs.user_seeks, migs.user_scans, 
--migs.last_user_seek, migs.avg_total_user_cost,
--migs.avg_user_impact
--FROM sys.dm_db_missing_index_details AS mid
--CROSS APPLY sys.dm_db_missing_index_columns (mid.index_handle)
--INNER JOIN sys.dm_db_missing_index_groups AS mig 
--ON mig.index_handle = mid.index_handle
--INNER JOIN sys.dm_db_missing_index_group_stats  AS migs 
--ON mig.index_group_handle=migs.group_handle
----ORDER BY mig.index_group_handle, mig.index_handle, column_id
--ORDER BY migs.user_seeks DESC, migs.avg_user_impact DESC, [statement]
--GO
--SET NOCOUNT OFF

PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				Jobs														 '
PRINT '**************************************************************************'
PRINT '*----------*'
PRINT '| Failed   |'
PRINT '*----------*'
PRINT ''
SET NOCOUNT ON
DECLARE @COUNT	INT

SET @COUNT=(SELECT count(*) FROM msdb..sysjobhistory h, msdb..sysjobs j
		WHERE j.job_id = h.job_id 
		AND run_status = 0
		AND h.run_date = (SELECT MAX(hi.run_date) 
			FROM msdb..sysjobhistory hi 
			WHERE h.job_id = hi.job_id))
BEGIN
	IF @COUNT = 0 PRINT 'Nothing'
	ELSE
	SELECT DISTINCT j.name AS "Job name"
		, j.description AS "Job Description"
		, h.run_date AS LastStatusDate
		,CASE h.run_status 
			WHEN 0 THEN 'Failed' 
			WHEN 1 THEN 'Successful' 
			WHEN 3 THEN 'Cancelled' 
			WHEN 4 THEN 'In Progress' 
			END AS JobStatus
	FROM msdb..sysjobhistory h, msdb..sysjobs j
	WHERE j.job_id = h.job_id 
	AND run_status = 0
	AND h.run_date = (SELECT MAX(hi.run_date) 
		FROM msdb..sysjobhistory hi 
		WHERE h.job_id = hi.job_id)
	ORDER BY 1
END
GO
SET NOCOUNT OFF
--PRINT ''
--PRINT '*----------*'
--PRINT '| Running  |'
--PRINT '*----------*'
--PRINT ''
--SET NOCOUNT ON
--EXEC msdb.dbo.sp_get_composite_job_info NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL
--GO
--SET NOCOUNT OFF
SET NOCOUNT OFF

PRINT ''
PRINT '*----------*'
PRINT '| Disabled |'
PRINT '*----------*'
PRINT ''
SET NOCOUNT ON
DECLARE @COUNT	INT

SET @COUNT=(SELECT count(*) FROM msdb.dbo.sysjobs WHERE enabled = 0)
BEGIN
	IF @COUNT = 0 PRINT 'Nothing'
	ELSE
	SELECT 	name AS "Job disabled",CONVERT(CHAR(19),date_modified,0) AS "Date"
FROM msdb.dbo.sysjobs 
WHERE enabled = 0 
ORDER BY name
END
SET NOCOUNT OFF

PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				Databases recovery Model			 '
PRINT '**************************************************************************'
PRINT ''

SET NOCOUNT ON
SELECT 
	name AS DBNAME,
	--  recovery_model AS RECOVERY_CODE,
	recovery_model_desc AS RECOVERY_TYPE
FROM master.sys.databases 
WHERE name NOT IN ('master','msdb','model','tempdb')
ORDER BY RECOVERY_TYPE, DBNAME
GO
SET NOCOUNT OFF

PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				Collation					 '
PRINT '**************************************************************************'
PRINT ''
SET NOCOUNT ON
PRINT 'INSTANCE COLLATION:  '+CAST(SERVERPROPERTY('collation') AS NVARCHAR(30))
PRINT ''
IF (SELECT COUNT(name) FROM master.sys.databases
 where collation_name != SERVERPROPERTY('collation'))= 0
BEGIN
	PRINT 'All databases have the same collation than the Instance'
END
IF (SELECT COUNT(name) FROM master.sys.databases
 where collation_name != SERVERPROPERTY('collation'))> 0
BEGIN
	PRINT 'List of databases with Collation different than the Instance:'
	PRINT ''
	SELECT [name] AS [dbname], collation_name
	FROM master.sys.databases
	WHERE collation_name != SERVERPROPERTY('collation')
END
SET NOCOUNT OFF
PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				Database Summary			     		 '
PRINT '**************************************************************************'
PRINT ''
PRINT ''
SET NOCOUNT ON
PRINT ''
-- Check databases not in MULTI_USER access mode
IF (SELECT COUNT(name) FROM master.sys.databases WHERE user_access > 0) > 0
BEGIN
	PRINT '*------------------------------------------------------*'
	PRINT '*- The following databases are not in MULTI_USER mode -*'
	PRINT '*------------------------------------------------------*'
	SELECT name,user_access_desc
	 FROM master.sys.databases WHERE user_access > 0
	PRINT ''
END

-- Check databases where compatibility level < sql server version
DECLARE @PRODVER SQL_VARIANT
SET @PRODVER=(SELECT SERVERPROPERTY('productversion'))
IF (SELECT CONVERT(VARCHAR(20),@PRODVER)) LIKE '9.%'
BEGIN
	IF (SELECT count(name) FROM master.sys.databases WHERE compatibility_level != 90) > 0
	BEGIN
		PRINT '*------------------------------------------------------------*'
		PRINT '*- The following databases are in lower compatibility level -*'
		PRINT '*------------------------------------------------------------*'
		SELECT name, compatibility_level
		 FROM master.sys.databases WHERE compatibility_level != 90
		PRINT ''
	END
END
IF (SELECT CONVERT(VARCHAR(20),@PRODVER)) LIKE '10.%'
BEGIN
	IF (SELECT count(name) FROM master.sys.databases WHERE compatibility_level != 100) > 0
	BEGIN
		PRINT '*------------------------------------------------------------*'
		PRINT '*- The following databases are in lower compatibility level -*'
		PRINT '*------------------------------------------------------------*'
		SELECT name, compatibility_level
		 FROM master.sys.databases WHERE compatibility_level != 100
		PRINT ''
	END
END

-- Check read only databases
IF (SELECT COUNT(name) FROM master.sys.databases WHERE is_read_only = 1) > 0
BEGIN
	PRINT '*-------------------------------------------------*'
	PRINT '*- The following databases are in READ ONLY mode -*'
	PRINT '*-------------------------------------------------*'
	SELECT name,CASE is_read_only WHEN 1 THEN 'YES' END AS [READ_ONLY]
	 FROM master.sys.databases WHERE is_read_only = 1
	PRINT ''
END

-- Check auto close databases
IF (SELECT COUNT(name) FROM master.sys.databases WHERE is_auto_close_on = 1) > 0
BEGIN
	PRINT '*--------------------------------------------------*'
	PRINT '*- The following databases are in AUTO CLOSE mode -*'
	PRINT '*--------------------------------------------------*'
	SELECT name,CASE is_auto_close_on  WHEN 1 THEN 'YES' END AS [AUTO_CLOSE]
	 FROM master.sys.databases WHERE is_auto_close_on = 1
	PRINT ''
END

-- Check auto shrink databases
IF (SELECT COUNT(name) FROM master.sys.databases WHERE is_auto_shrink_on = 1) > 0
BEGIN
	PRINT '*---------------------------------------------------*'
	PRINT '*- The following databases are in AUTO SHRINK mode -*'
	PRINT '*---------------------------------------------------*'
	SELECT name,CASE is_auto_shrink_on WHEN 1 THEN 'YES' END AS [AUTO_SHRINK]
	 FROM master.sys.databases WHERE is_auto_shrink_on = 1
	PRINT ''
END

-- Check status of databases
IF (SELECT COUNT(name) FROM master.sys.databases WHERE state > 0) > 0
BEGIN
	PRINT '*------------------------------------------*'
	PRINT '*- The following databases are not ONLINE -*'
	PRINT '*------------------------------------------*'
	SELECT name,state_desc FROM master.sys.databases WHERE state > 0
	PRINT ''
END

-- Check databases OFFLINE not cleanly shutdown (need recovery)
IF (SELECT COUNT(name) FROM master.sys.databases WHERE is_cleanly_shutdown = 0 AND state > 0) > 0
BEGIN
	PRINT '*---------------------------------------------------------------------------------*'
	PRINT '*- The following databases didn''t cleanly shutdown and need recovery on startup -*'
	PRINT '*---------------------------------------------------------------------------------*'
	SELECT name,CASE is_cleanly_shutdown WHEN 0 THEN 'YES' END AS [NEED_RECOVERY_ON_STARTUP]
	 FROM master.sys.databases WHERE is_cleanly_shutdown = 0 AND state > 0
	PRINT ''
END

-- Check stanby for recovery databases
IF (SELECT COUNT(name) FROM master.sys.databases WHERE is_in_standby = 1) > 0
BEGIN
	PRINT '*---------------------------------------------------------------------*'
	PRINT '*- The following databases are in stanby (read only for restore log) -*'
	PRINT '*---------------------------------------------------------------------*'
	SELECT name,CASE is_in_standby WHEN 1 THEN 'YES' END AS [STANDBY]
	 FROM master.sys.databases WHERE is_in_standby = 1
	PRINT ''
END

-- Check databases snapshot isolation ON (default is OFF)
IF (SELECT COUNT(name) FROM master.sys.databases WHERE is_read_committed_snapshot_on = 1) > 0
BEGIN
	PRINT '*--------------------------------------------------------------------------*'
	PRINT '*- The following databases are in Read-committed-snapshot				 -*'
	PRINT '*- (Read operations are based on snapshot scans and do not acquire locks) -*'
	PRINT '*--------------------------------------------------------------------------*'
	SELECT name,CASE is_read_committed_snapshot_on WHEN 1 THEN 'ON' END AS [READ_COMMITTED_SNAPSHOT]
	 FROM master.sys.databases WHERE is_read_committed_snapshot_on = 1
	PRINT ''
END

-- Check if databases are in page verify option = CHECKSUM
IF (SELECT COUNT(name) FROM master.sys.databases WHERE page_verify_option != 2 AND database_id != 2) > 0
BEGIN
	PRINT '*-----------------------------------------------------------*'
	PRINT '*- The following databases are not in page verify CHECKSUM -*'
	PRINT '*-----------------------------------------------------------*'
	SELECT name,page_verify_option_desc
	 FROM master.sys.databases WHERE page_verify_option != 2 AND database_id != 2
	PRINT ''
END

-- Check if databases are not in auto create statistics
IF (SELECT COUNT(name) FROM master.sys.databases WHERE is_auto_create_stats_on = 0) > 0
BEGIN
	PRINT '*-------------------------------------------------------------*'
	PRINT '*- The following databases are not in AUTO CREATE STATISTICS -*'
	PRINT '*-------------------------------------------------------------*'
	SELECT name,CASE is_auto_create_stats_on WHEN 0 THEN 'OFF' END AS [AUTO_CREATE_STATISTICS]
	 FROM master.sys.databases WHERE is_auto_create_stats_on = 0 
	PRINT ''
END

-- Check if databases are not in auto update statistics
IF (SELECT COUNT(name) FROM master.sys.databases WHERE is_auto_update_stats_on = 0) > 0
BEGIN
	PRINT '*-------------------------------------------------------------*'
	PRINT '*- The following databases are not in AUTO UPDATE STATISTICS -*'
	PRINT '*-------------------------------------------------------------*'
	SELECT name,CASE is_auto_update_stats_on WHEN 0 THEN 'OFF' END AS [AUTO_UPDATE_STATISTICS]
	 FROM master.sys.databases WHERE is_auto_update_stats_on = 0 
	PRINT ''
END

-- Check if databases are not in auto update statistics async
IF (SELECT COUNT(name) FROM master.sys.databases
	 WHERE is_auto_update_stats_async_on = 0 AND is_auto_update_stats_async_on = 1) > 0
BEGIN
	PRINT '*-------------------------------------------------------------------*'
	PRINT '*- The following databases are in AUTO UPDATE STATISTICS ASYNC -*'
	PRINT '*-  (default is synchronous)										  -*'
	PRINT '*-------------------------------------------------------------------*'
	SELECT name,CASE is_auto_update_stats_async_on WHEN 0 THEN 'OFF' END AS [AUTO_CREATE_STATISTICS_ASYNC]
	 FROM master.sys.databases WHERE is_auto_update_stats_async_on = 0 AND is_auto_update_stats_async_on = 1
	PRINT ''
END

-- Check if Full-text is disabled for the databases (except master, model and tempdb)
IF (SELECT COUNT(name) FROM master.sys.databases
	 WHERE is_fulltext_enabled = 0 AND database_id NOT IN (1,2,3)) > 0
BEGIN
	PRINT '*--------------------------------------------------*'
	PRINT '*- The following databases are Full-text disabled -*'
	PRINT '*--------------------------------------------------*'
	SELECT name,CASE is_fulltext_enabled WHEN 0 THEN 'OFF' END AS [FULL_TEXT]
	 FROM master.sys.databases
	 WHERE is_fulltext_enabled = 0 AND database_id NOT IN (1,2,3)
	PRINT ''
END

-- REPLICATION TOPOLOGY
-- Check if database is a publication database in a transactional or snapshot replication topology
IF (SELECT COUNT(name) FROM master.sys.databases WHERE is_published = 1) > 0
BEGIN
	PRINT '*-------------------------------------------------------*'
	PRINT '*- The following databases are publication databases	  -*'
	PRINT '*- in a transactional or snapshot replication topology -*'
	PRINT '*-------------------------------------------------------*'
	SELECT name,CASE is_published WHEN 1 THEN 'YES' END AS [PUBLICATION_DATABASE]
	 FROM master.sys.databases WHERE is_published = 1
	PRINT ''
END

-- Check if database is a subscription database in a replication topology
IF (SELECT COUNT(name) FROM master.sys.databases WHERE is_subscribed = 1) > 0
BEGIN
	PRINT '*------------------------------------------------------*'
	PRINT '*- The following databases are subscription databases -*'
	PRINT '*- in a replication topology							 -*'
	PRINT '*------------------------------------------------------*'
	SELECT name,CASE is_subscribed WHEN 1 THEN 'YES' END AS [SUSCRIPTION_DATABASE]
	 FROM master.sys.databases WHERE is_subscribed = 1
	PRINT ''
END

-- Check if database is a publication database in a merge replication topology
IF (SELECT COUNT(name) FROM master.sys.databases WHERE is_merge_published = 1) > 0
BEGIN
	PRINT '*-----------------------------------------------------*'
	PRINT '*- The following databases are publication databases -*'
	PRINT '*- in a merge replication topology					-*'
	PRINT '*-----------------------------------------------------*'
	SELECT name,CASE is_merge_published WHEN 1 THEN 'YES' END AS [MERGE_PUBLICATION_DATABASE]
	 FROM master.sys.databases WHERE is_merge_published = 1
	PRINT ''
END

-- Check if database is the distribution database for a replication topology
IF (SELECT COUNT(name) FROM master.sys.databases WHERE is_distributor = 1) > 0
BEGIN
	PRINT '*------------------------------------------------------*'
	PRINT '*- The following databases are distribution databases -*'
	PRINT '*-  for a replication topology						 -*'
	PRINT '*------------------------------------------------------*'
	SELECT name,CASE is_distributor WHEN 1 THEN 'YES' END AS [DISTRIBUTION_DATABASE]
	 FROM master.sys.databases WHERE is_distributor = 1
	PRINT ''
END

-- Check if database is marked for replication synchronization with backup
IF (SELECT COUNT(name) FROM master.sys.databases WHERE is_sync_with_backup = 1) > 0
BEGIN
	PRINT '*-----------------------------------------------*'
	PRINT '*- The following databases are marked		  -*'
	PRINT '*- for replication synchronization with backup -*'
	PRINT '*-----------------------------------------------*'
	SELECT name,CASE is_sync_with_backup WHEN 1 THEN 'YES' END AS [MARKED_FOR_REPL]
	 FROM master.sys.databases WHERE is_sync_with_backup = 1
	PRINT ''
END

-- Check if database reuse of transaction log space is currently waiting
IF (SELECT COUNT(name) FROM master.sys.databases WHERE log_reuse_wait > 0 AND database_id != 3) > 0
BEGIN
	PRINT '*----------------------------------------------------------*'
	PRINT '*- The following databases reuse of transaction log space -*'
	PRINT '*- is currently waiting for the following reasons		 -*'
	PRINT '*----------------------------------------------------------*'
	SELECT name,log_reuse_wait_desc AS [LOG_WAITING_CAUSE]
	 FROM master.sys.databases WHERE log_reuse_wait > 0 AND database_id != 3
	PRINT ''
END
SET NOCOUNT OFF

PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				Audit Size                      		 '
PRINT '**************************************************************************'
PRINT ''
SET NOCOUNT ON
USE [master]
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[#tmp_sfs]'))
DROP TABLE #tmp_sfs
CREATE TABLE #tmp_sfs
	(
	fileid int
	,filegroup int 
	,extents bigint 
	,usedextents bigint
	,name varchar(1024)
	,filename varchar(1024)
	)

IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[#tmplg]'))
DROP TABLE #tmplg
CREATE TABLE #tmplg
(
DBNAME varchar(100),
LOGSIZE real,
LOGSPACEUSED real,
Status int
)

IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[#tmp_stats]'))
DROP TABLE #tmp_stats
CREATE TABLE #tmp_stats
	(
	dbname sysname
	,[size (MB)] bigint
	,[used (MB)] bigint
	,[% used]	smallint
	,name varchar(1024)
	,filename varchar(1024)
	,filegroup int 
	,datatype varchar(4)
	,date smalldatetime
	)

DECLARE @cmd1			nvarchar(1024)
DECLARE @cmd2			nvarchar(1024)
DECLARE @cmd3			nvarchar(1024)
DECLARE @LOGSIZE 		real 
DECLARE @LOGSPACEUSED 	real
DECLARE @dbname			sysname

SET @cmd2 = 'dbcc sqlperf (logspace)'
INSERT INTO #tmplg EXECUTE (@cmd2)

DECLARE c1 cursor FOR
	--SELECT name
	--FROM master..sysdatabases
	SELECT name
	FROM [tempdb].[dbo].[OnlineDB]


OPEN c1

FETCH c1 INTO @dbname

WHILE (@@FETCH_STATUS =0)

BEGIN
	SET @cmd1='USE ['+@dbname+'] DBCC SHOWFILESTATS'
	TRUNCATE TABLE #tmp_sfs
	INSERT INTO #tmp_sfs EXECUTE(@cmd1)

	INSERT INTO #tmp_stats 
		SELECT @dbname
			, extents*64/1024 
			, usedextents*64/1024
			, usedextents*100/extents
			, name, filename, filegroup, 'DATA', getdate()
		FROM #tmp_sfs


	SET @cmd3 = 'USE ['+@dbname+'] '
	SET @cmd3 = @cmd3 + '
	INSERT INTO #tmp_stats 
		SELECT DB_NAME()
			, sdf.[size]*8/1024
			, (sdf.[size]*8/1024)*tlg.LOGSPACEUSED/100.0
			, tlg.LOGSPACEUSED
			, sdf.[name],sdf.[physical_name],NULL, ''LOG'', getdate() 
		FROM sys.database_files sdf, #tmplg tlg
		WHERE sdf.[type] = 1
		AND DBNAME = DB_NAME()'
	EXEC(@cmd3)

	FETCH c1 INTO @dbname
END

CLOSE c1
DEALLOCATE  c1

PRINT ''
PRINT '*--------------------------*'
PRINT '*--- Datafile Stats     ---*'
PRINT '*--------------------------*'
SELECT * FROM #tmp_stats
WHERE datatype = 'DATA'
ORDER BY [dbname], [% used] DESC

PRINT ''
PRINT '*--------------------------*'
PRINT '*--- Logfile Stats     ---*'
PRINT '*--------------------------*'
SELECT * FROM #tmp_stats
WHERE datatype = 'LOG'
ORDER BY [dbname]

IF (SELECT count([dbname]) FROM #tmp_stats
WHERE datatype = 'DATA'
AND dbname NOT IN ('master','msdb','model','tempdb')
AND [% used] > 90) > 0
BEGIN
	PRINT ''
	PRINT '*--------------------------*'
	PRINT '*--- Datafile Critical  ---*'
	PRINT '*--------------------------*'
	SELECT [dbname],[name],[% used] FROM #tmp_stats
	WHERE datatype = 'DATA'
	AND dbname NOT IN ('master','msdb','model','tempdb')
	AND [% used] > 90
	ORDER BY [% used] DESC
END

IF (SELECT count([dbname]) FROM #tmp_stats
WHERE datatype = 'DATA'
AND dbname NOT IN ('master','msdb','model','tempdb')
AND [% used] BETWEEN  80 AND 90) > 0
BEGIN
	PRINT ''
	PRINT '*--------------------------*'
	PRINT '*--- Datafile Warning   ---*'
	PRINT '*--------------------------*'
	SELECT [dbname],[name],[% used] FROM #tmp_stats
	WHERE datatype = 'DATA'
	AND dbname NOT IN ('master','msdb','model','tempdb')
	AND [% used] BETWEEN  80 AND 90
	ORDER BY [% used] DESC
END

IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[#tmp_sfs]'))
DROP TABLE #tmp_sfs
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[#tmp_stats]'))
DROP TABLE #tmp_stats
SET NOCOUNT OFF



PRINT ''
PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				List of Trace Profiler                   		 '
PRINT '**************************************************************************'
PRINT ''
PRINT ''
SET NOCOUNT ON
DECLARE @trc smallint
SET @trc=0

TRACE_LIST:
SET @trc=@trc+1
IF (SELECT count(*) FROM ::fn_trace_getinfo(@trc)) > 0
BEGIN
	SELECT * FROM ::fn_trace_getinfo(@trc)
	GOTO TRACE_LIST
END
SET NOCOUNT OFF

PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				List of Trace Flags enabled globally                   		 '
PRINT '**************************************************************************'
PRINT ''
PRINT ''
DBCC TRACESTATUS(-1)
GO
PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				Parameters                      		 '
PRINT '**************************************************************************'
PRINT ''

SET NOCOUNT ON
--rollback sp_configure configs
IF (SELECT value 
	FROM [tempdb].[dbo].[config]
	WHERE comment='Enable or disable command shell') = 0
BEGIN
	EXEC master..sp_configure 'xp_cmdshell',0
	RECONFIGURE
END
IF (SELECT value 
	FROM [tempdb].[dbo].[config]
	WHERE comment='show advanced options') = 0
BEGIN
	EXEC master..sp_configure 'show advanced options',0
	RECONFIGURE
END

-- check version of SQL Server and run the right script
--DECLARE @PRODVER SQL_VARIANT
--SET @PRODVER=(SELECT  SERVERPROPERTY('productversion'))
--IF (SELECT CONVERT(VARCHAR(20),@PRODVER)) LIKE '9.%' GOTO SQL2005ver
--IF (SELECT CONVERT(VARCHAR(20),@PRODVER)) LIKE '10.%' GOTO SQL2008ver
--IF (SELECT CONVERT(VARCHAR(20),@PRODVER)) LIKE '12.%' GOTO SQL2012ver 
IF (SELECT [sqlver_value] FROM [tempdb].[dbo].[sqlver]) = 9 GOTO SQL2005ver
IF (SELECT [sqlver_value] FROM [tempdb].[dbo].[sqlver]) = 10 GOTO SQL2008ver
IF (SELECT [sqlver_value] FROM [tempdb].[dbo].[sqlver]) = 12 GOTO SQL2012ver

SQL2005ver:
	-- create temp table with default values
	-- if the default values changes in the future you have to update the script
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb].[dbo].[defaultconf_2005]'))
DROP TABLE [tempdb].[dbo].[defaultconf_2005]
CREATE TABLE [tempdb].[dbo].[defaultconf_2005](name nvarchar(35), value sql_variant)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'Ad Hoc Distributed Queries',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'affinity I/O mask',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'affinity mask',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'Agent XPs',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'allow updates',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'awe enabled',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'blocked process threshold (s)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'c2 audit mode',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'lr enabled',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'common criteria compliance enabled',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'cost threshold for parallelism',5)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'cross db ownership chaining',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'cursor threshold',-1)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'Database Mail XPs',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'default full-text language',1033)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'default language',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'default trace enabled',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'disallow results from triggers',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'fill factor (%)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'ft crawl bandwidth (max)',100)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'ft crawl bandwidth (min)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'ft notify bandwidth (max)',100)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'ft notify bandwidth (min)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'index create memory (KB)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'in-doubt xact resolution',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'lightweight pooling',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'locks',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'max degree of parallelism',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'max full-text crawl range',4)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'max server memory (MB)',2147483647)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'max text repl size (B)',65536)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'max worker threads',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'media retention',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'min memory per query (KB)',1024)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'min server memory (MB)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'nested triggers',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'network packet size (B)',4096)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'Ole Automation Procedures',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'open objects',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'PH timeout (s)',60)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'precompute rank',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'priority boost',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'query governor cost limit',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'query wait (s)',-1)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'recovery interval (min)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'remote access',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'remote admin connections',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'remote login timeout (s)',20)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'remote proc trans',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'remote query timeout (s)',600)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'Replication XPs',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'scan for startup procs',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'server trigger recursion',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'set working set size',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'show advanced options',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'SMO and DMO XPs',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'SQL Mail XPs',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'transform noise words',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'two digit year cutoff',2049)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'user connections',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'user options',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'Web Assistant Procedures',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2005] VALUES (N'xp_cmdshell',0)

-- Compare running values with default ones
IF (SELECT count(sc.name) 
FROM master.sys.configurations sc
INNER JOIN [tempdb].[dbo].[defaultconf_2005] dc
ON sc.name = dc.name
WHERE sc.value_in_use != dc.value) = 0
BEGIN
	PRINT ''
	PRINT 'All instance configuration parameters are by default'
	PRINT ''
END
ELSE 
BEGIN
	PRINT ''
	PRINT 'These configuration parameters are differents from default'
	SELECT sc.name, CAST(sc.value AS nvarchar(20)) AS [value]
			, CAST(sc.value_in_use AS nvarchar(20)) AS [value_in_use], CAST(dc.value AS nvarchar(20)) AS [default]
			, sc.is_dynamic
			, sc.description
	FROM master.sys.configurations sc
	INNER JOIN [tempdb].[dbo].[defaultconf_2005] dc
	ON sc.name = dc.name
	WHERE sc.value_in_use != dc.value
	PRINT ''
END
GOTO EndCheckConfig

SQL2008ver:
SELECT CAST(sc.value_in_use AS smallint) AS [maxdop_in_use]
	, CASE WHEN si.cpu_count / si.hyperthread_ratio > 8 THEN 8 ELSE si.cpu_count / si.hyperthread_ratio END AS optimal_maxdop_setting
	, si.cpu_count
	, si.hyperthread_ratio
FROM master.sys.configurations sc, master.sys.dm_os_sys_info si
WHERE sc.name = 'max degree of parallelism'
	-- create temp table with default values
	-- if the default values changes in the future you have to update the script
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb].[dbo].[defaultconf_2008]'))
DROP TABLE [tempdb].[dbo].[defaultconf_2008]
CREATE TABLE [tempdb].[dbo].[defaultconf_2008](name nvarchar(35), value sql_variant)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'access check cache bucket count',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'access check cache quota',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'Ad Hoc Distributed Queries',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'affinity I/O mask',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'affinity mask',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'Agent XPs',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'allow updates',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'awe enabled',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'backup compression default',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'blocked process threshold (s)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'c2 audit mode',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'lr enabled',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'common criteria compliance enabled',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'cost threshold for parallelism',5)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'cross db ownership chaining',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'cursor threshold',-1)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'Database Mail XPs',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'default full-text language',1033)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'default language',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'default trace enabled',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'disallow results from triggers',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'EKM provider enabled',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'filestream access level',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'fill factor (%)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'ft crawl bandwidth (max)',100)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'ft crawl bandwidth (min)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'ft notify bandwidth (max)',100)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'ft notify bandwidth (min)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'index create memory (KB)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'in-doubt xact resolution',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'lightweight pooling',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'locks',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'max degree of parallelism',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'max full-text crawl range',4)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'max server memory (MB)',2147483647)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'max text repl size (B)',65536)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'max worker threads',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'media retention',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'min memory per query (KB)',1024)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'min server memory (MB)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'nested triggers',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'network packet size (B)',4096)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'Ole Automation Procedures',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'open objects',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'optimize for ad hoc workloads',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'PH timeout (s)',60)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'precompute rank',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'priority boost',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'query governor cost limit',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'query wait (s)',-1)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'recovery interval (min)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'remote access',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'remote admin connections',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'remote login timeout (s)',20)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'remote proc trans',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'remote query timeout (s)',600)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'Replication XPs',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'scan for startup procs',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'server trigger recursion',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'set working set size',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'show advanced options',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'SMO and DMO XPs',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'SQL Mail XPs',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'transform noise words',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'two digit year cutoff',2049)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'user connections',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'user options',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2008] VALUES (N'xp_cmdshell',0)

-- Compare running values with default ones
IF (SELECT count(sc.name) 
FROM master.sys.configurations sc
INNER JOIN [tempdb].[dbo].[defaultconf_2008] dc
ON sc.name = dc.name
WHERE sc.value_in_use != dc.value) = 0
BEGIN
	PRINT ''
	PRINT 'All instance configuration parameters are by default'
	PRINT ''
END
ELSE 
BEGIN
	PRINT ''
	PRINT 'These configuration parameters are differents from default'
	SELECT sc.name, CAST(sc.value AS nvarchar(20)) AS [value]
			, CAST(sc.value_in_use AS nvarchar(20)) AS [value_in_use], CAST(dc.value AS nvarchar(20))  AS [default]
			, sc.is_dynamic
			, sc.description
	FROM master.sys.configurations sc
	INNER JOIN [tempdb].[dbo].[defaultconf_2008] dc
	ON sc.name = dc.name
	WHERE sc.value_in_use != dc.value
	PRINT ''
END

GOTO EndCheckConfig

SQL2012ver:
SELECT CAST(sc.value_in_use AS smallint) AS [maxdop_in_use]
	, CASE WHEN si.cpu_count / si.hyperthread_ratio > 8 THEN 8 ELSE si.cpu_count / si.hyperthread_ratio END AS [optimal_maxdop_setting]
	, si.cpu_count
	, si.hyperthread_ratio
FROM master.sys.configurations sc, master.sys.dm_os_sys_info si
WHERE sc.name = 'max degree of parallelism'

	-- create temp table with default values
	-- if the default values changes in the future you have to update the script
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb].[dbo].[defaultconf_2012]'))
DROP TABLE [tempdb].[dbo].[defaultconf_2012]
CREATE TABLE [tempdb].[dbo].[defaultconf_2012](name nvarchar(35), value sql_variant)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'access check cache bucket count',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'access check cache quota',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'Ad Hoc Distributed Queries',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'affinity I/O mask',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'affinity mask',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'Agent XPs',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'allow updates',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'awe enabled',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'backup compression default',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'blocked process threshold (s)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'c2 audit mode',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'lr enabled',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'common criteria compliance enabled',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'cost threshold for parallelism',5)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'cross db ownership chaining',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'cursor threshold',-1)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'Database Mail XPs',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'default full-text language',1033)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'default language',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'default trace enabled',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'disallow results from triggers',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'EKM provider enabled',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'filestream access level',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'fill factor (%)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'ft crawl bandwidth (max)',100)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'ft crawl bandwidth (min)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'ft notify bandwidth (max)',100)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'ft notify bandwidth (min)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'index create memory (KB)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'in-doubt xact resolution',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'lightweight pooling',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'locks',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'max degree of parallelism',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'max full-text crawl range',4)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'max server memory (MB)',2147483647)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'max text repl size (B)',65536)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'max worker threads',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'media retention',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'min memory per query (KB)',1024)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'min server memory (MB)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'nested triggers',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'network packet size (B)',4096)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'Ole Automation Procedures',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'open objects',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'optimize for ad hoc workloads',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'PH timeout (s)',60)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'precompute rank',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'priority boost',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'query governor cost limit',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'query wait (s)',-1)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'recovery interval (min)',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'remote access',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'remote admin connections',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'remote login timeout (s)',20)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'remote proc trans',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'remote query timeout (s)',600)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'Replication XPs',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'scan for startup procs',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'server trigger recursion',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'set working set size',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'show advanced options',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'SMO and DMO XPs',1)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'SQL Mail XPs',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'transform noise words',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'two digit year cutoff',2049)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'user connections',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'user options',0)
INSERT INTO [tempdb].[dbo].[defaultconf_2012] VALUES (N'xp_cmdshell',0)

-- Compare running values with default ones
IF (SELECT count(sc.name) 
FROM master.sys.configurations sc
INNER JOIN [tempdb].[dbo].[defaultconf_2012] dc
ON sc.name = dc.name
WHERE sc.value_in_use != dc.value) = 0
BEGIN
	PRINT ''
	PRINT 'All instance configuration parameters are by default'
	PRINT ''
END
ELSE 
BEGIN
	PRINT ''
	PRINT 'These configuration parameters are differents from default'
	SELECT sc.name, CAST(sc.value AS nvarchar(20)) AS [value]
			, CAST(sc.value_in_use AS nvarchar(20)) AS [value_in_use], CAST(dc.value AS nvarchar(20))  AS [default]
			, sc.is_dynamic
			, sc.description
	FROM master.sys.configurations sc
	INNER JOIN [tempdb].[dbo].[defaultconf_2012] dc
	ON sc.name = dc.name
	WHERE sc.value_in_use != dc.value
	PRINT ''
END
GOTO EndCheckConfig


EndCheckConfig:
--drop temp tables
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[tempdb].[dbo].[config]'))
DROP TABLE [tempdb].[dbo].[config]
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[tempdb].[dbo].[defaultconf_2005]'))
DROP TABLE [tempdb].[dbo].[defaultconf_2005]
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[tempdb].[dbo].[defaultconf_2008]'))
DROP TABLE [tempdb].[dbo].[defaultconf_2008]
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[tempdb].[dbo].[defaultconf_2012]'))
DROP TABLE [tempdb].[dbo].[defaultconf_2012]
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb]..[OnlineDB]'))
DROP TABLE [tempdb].[dbo].[OnlineDB]
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects
WHERE id = object_id(N'[tempdb]..[sqlver]'))
DROP TABLE [tempdb].[dbo].[sqlver]
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects
WHERE id = object_id(N'[tempdb]..[alwayson]'))
DROP TABLE [tempdb].[dbo].[alwayson]
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects
WHERE id = object_id(N'[tempdb]..[alwayson_status]'))
DROP TABLE [tempdb].[dbo].[alwayson_status]
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb].[dbo].[orphaned]'))
DROP TABLE [tempdb].[dbo].[orphaned]
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb].[dbo].[config]'))
DROP TABLE [tempdb].[dbo].[config]
GO
IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id =
object_id(N'[tempdb].[dbo].[defaultconf]'))
DROP TABLE [tempdb].[dbo].[defaultconf]
GO
SET NOCOUNT OFF

PRINT ''
PRINT ''
PRINT '**************************************************************************'
PRINT '				END OF AUDIT					 '
PRINT '**************************************************************************'
PRINT ''

